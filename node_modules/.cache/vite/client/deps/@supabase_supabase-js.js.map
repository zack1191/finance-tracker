{
  "version": 3,
  "sources": ["../../../../@supabase/supabase-js/src/lib/version.ts", "../../../../@supabase/supabase-js/src/lib/constants.ts", "../../../../@supabase/supabase-js/src/lib/fetch.ts", "../../../../@supabase/supabase-js/src/lib/helpers.ts", "../../../../@supabase/auth-js/src/lib/version.ts", "../../../../@supabase/auth-js/src/lib/constants.ts", "../../../../@supabase/auth-js/src/lib/helpers.ts", "../../../../@supabase/auth-js/src/lib/errors.ts", "../../../../@supabase/auth-js/src/lib/fetch.ts", "../../../../@supabase/auth-js/src/GoTrueAdminApi.ts", "../../../../@supabase/auth-js/src/lib/local-storage.ts", "../../../../@supabase/auth-js/src/lib/polyfills.ts", "../../../../@supabase/auth-js/src/lib/locks.ts", "../../../../@supabase/auth-js/src/GoTrueClient.ts", "../../../../@supabase/auth-js/src/AuthAdminApi.ts", "../../../../@supabase/auth-js/src/AuthClient.ts", "../../../../@supabase/supabase-js/src/lib/SupabaseAuthClient.ts", "../../../../@supabase/supabase-js/src/SupabaseClient.ts", "../../../../@supabase/supabase-js/src/index.ts"],
  "sourcesContent": ["export const version = '2.43.0'\n", "// constants.ts\nimport { RealtimeClientOptions } from '@supabase/realtime-js'\nimport { SupabaseAuthClientOptions } from './types'\nimport { version } from './version'\n\nlet JS_ENV = ''\n// @ts-ignore\nif (typeof Deno !== 'undefined') {\n  JS_ENV = 'deno'\n} else if (typeof document !== 'undefined') {\n  JS_ENV = 'web'\n} else if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n  JS_ENV = 'react-native'\n} else {\n  JS_ENV = 'node'\n}\n\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js-${JS_ENV}/${version}` }\n\nexport const DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS,\n}\n\nexport const DEFAULT_DB_OPTIONS = {\n  schema: 'public',\n}\n\nexport const DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit',\n}\n\nexport const DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\n", "// @ts-ignore\nimport nodeFetch, { Headers as NodeFetchHeaders } from '@supabase/node-fetch'\n\ntype Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = nodeFetch as unknown as Fetch\n  } else {\n    _fetch = fetch\n  }\n  return (...args: Parameters<Fetch>) => _fetch(...args)\n}\n\nexport const resolveHeadersConstructor = () => {\n  if (typeof Headers === 'undefined') {\n    return NodeFetchHeaders\n  }\n\n  return Headers\n}\n\nexport const fetchWithAuth = (\n  supabaseKey: string,\n  getAccessToken: () => Promise<string | null>,\n  customFetch?: Fetch\n): Fetch => {\n  const fetch = resolveFetch(customFetch)\n  const HeadersConstructor = resolveHeadersConstructor()\n\n  return async (input, init) => {\n    const accessToken = (await getAccessToken()) ?? supabaseKey\n    let headers = new HeadersConstructor(init?.headers)\n\n    if (!headers.has('apikey')) {\n      headers.set('apikey', supabaseKey)\n    }\n\n    if (!headers.has('Authorization')) {\n      headers.set('Authorization', `Bearer ${accessToken}`)\n    }\n\n    return fetch(input, { ...init, headers })\n  }\n}\n", "// helpers.ts\nimport { SupabaseClientOptions } from './types'\n\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport function stripTrailingSlash(url: string): string {\n  return url.replace(/\\/$/, '')\n}\n\nexport const isBrowser = () => typeof window !== 'undefined'\n\nexport function applySettingDefaults<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database\n>(\n  options: SupabaseClientOptions<SchemaName>,\n  defaults: SupabaseClientOptions<any>\n): SupabaseClientOptions<SchemaName> {\n  const {\n    db: dbOptions,\n    auth: authOptions,\n    realtime: realtimeOptions,\n    global: globalOptions,\n  } = options\n  const {\n    db: DEFAULT_DB_OPTIONS,\n    auth: DEFAULT_AUTH_OPTIONS,\n    realtime: DEFAULT_REALTIME_OPTIONS,\n    global: DEFAULT_GLOBAL_OPTIONS,\n  } = defaults\n\n  return {\n    db: {\n      ...DEFAULT_DB_OPTIONS,\n      ...dbOptions,\n    },\n    auth: {\n      ...DEFAULT_AUTH_OPTIONS,\n      ...authOptions,\n    },\n    realtime: {\n      ...DEFAULT_REALTIME_OPTIONS,\n      ...realtimeOptions,\n    },\n    global: {\n      ...DEFAULT_GLOBAL_OPTIONS,\n      ...globalOptions,\n    },\n  }\n}\n", "export const version = '2.64.1'\n", "import { version } from './version'\nexport const GOTRUE_URL = 'http://localhost:9999'\nexport const STORAGE_KEY = 'supabase.auth.token'\nexport const AUDIENCE = ''\nexport const DEFAULT_HEADERS = { 'X-Client-Info': `gotrue-js/${version}` }\nexport const EXPIRY_MARGIN = 10 // in seconds\nexport const NETWORK_FAILURE = {\n  MAX_RETRIES: 10,\n  RETRY_INTERVAL: 2, // in deciseconds\n}\n\nexport const API_VERSION_HEADER_NAME = 'X-Supabase-Api-Version'\nexport const API_VERSIONS = {\n  '2024-01-01': {\n    timestamp: Date.parse('2024-01-01T00:00:00.0Z'),\n    name: '2024-01-01',\n  },\n}\n", "import { API_VERSION_HEADER_NAME } from './constants'\nimport { SupportedStorage } from './types'\n\nexport function expiresAt(expiresIn: number) {\n  const timeNow = Math.round(Date.now() / 1000)\n  return timeNow + expiresIn\n}\n\nexport function uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16) | 0,\n      v = c == 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16)\n  })\n}\n\nexport const isBrowser = () => typeof document !== 'undefined'\n\nconst localStorageWriteTests = {\n  tested: false,\n  writable: false,\n}\n\n/**\n * Checks whether localStorage is supported on this browser.\n */\nexport const supportsLocalStorage = () => {\n  if (!isBrowser()) {\n    return false\n  }\n\n  try {\n    if (typeof globalThis.localStorage !== 'object') {\n      return false\n    }\n  } catch (e) {\n    // DOM exception when accessing `localStorage`\n    return false\n  }\n\n  if (localStorageWriteTests.tested) {\n    return localStorageWriteTests.writable\n  }\n\n  const randomKey = `lswt-${Math.random()}${Math.random()}`\n\n  try {\n    globalThis.localStorage.setItem(randomKey, randomKey)\n    globalThis.localStorage.removeItem(randomKey)\n\n    localStorageWriteTests.tested = true\n    localStorageWriteTests.writable = true\n  } catch (e) {\n    // localStorage can't be written to\n    // https://www.chromium.org/for-testers/bug-reporting-guidelines/uncaught-securityerror-failed-to-read-the-localstorage-property-from-window-access-is-denied-for-this-document\n\n    localStorageWriteTests.tested = true\n    localStorageWriteTests.writable = false\n  }\n\n  return localStorageWriteTests.writable\n}\n\n/**\n * Extracts parameters encoded in the URL both in the query and fragment.\n */\nexport function parseParametersFromURL(href: string) {\n  const result: { [parameter: string]: string } = {}\n\n  const url = new URL(href)\n\n  if (url.hash && url.hash[0] === '#') {\n    try {\n      const hashSearchParams = new URLSearchParams(url.hash.substring(1))\n      hashSearchParams.forEach((value, key) => {\n        result[key] = value\n      })\n    } catch (e: any) {\n      // hash is not a query string\n    }\n  }\n\n  // search parameters take precedence over hash parameters\n  url.searchParams.forEach((value, key) => {\n    result[key] = value\n  })\n\n  return result\n}\n\ntype Fetch = typeof fetch\n\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch\n  if (customFetch) {\n    _fetch = customFetch\n  } else if (typeof fetch === 'undefined') {\n    _fetch = (...args) =>\n      import('@supabase/node-fetch' as any).then(({ default: fetch }) => fetch(...args))\n  } else {\n    _fetch = fetch\n  }\n  return (...args) => _fetch(...args)\n}\n\nexport const looksLikeFetchResponse = (maybeResponse: unknown): maybeResponse is Response => {\n  return (\n    typeof maybeResponse === 'object' &&\n    maybeResponse !== null &&\n    'status' in maybeResponse &&\n    'ok' in maybeResponse &&\n    'json' in maybeResponse &&\n    typeof (maybeResponse as any).json === 'function'\n  )\n}\n\n// Storage helpers\nexport const setItemAsync = async (\n  storage: SupportedStorage,\n  key: string,\n  data: any\n): Promise<void> => {\n  await storage.setItem(key, JSON.stringify(data))\n}\n\nexport const getItemAsync = async (storage: SupportedStorage, key: string): Promise<unknown> => {\n  const value = await storage.getItem(key)\n\n  if (!value) {\n    return null\n  }\n\n  try {\n    return JSON.parse(value)\n  } catch {\n    return value\n  }\n}\n\nexport const removeItemAsync = async (storage: SupportedStorage, key: string): Promise<void> => {\n  await storage.removeItem(key)\n}\n\nexport function decodeBase64URL(value: string): string {\n  const key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n  let base64 = ''\n  let chr1, chr2, chr3\n  let enc1, enc2, enc3, enc4\n  let i = 0\n  value = value.replace('-', '+').replace('_', '/')\n\n  while (i < value.length) {\n    enc1 = key.indexOf(value.charAt(i++))\n    enc2 = key.indexOf(value.charAt(i++))\n    enc3 = key.indexOf(value.charAt(i++))\n    enc4 = key.indexOf(value.charAt(i++))\n    chr1 = (enc1 << 2) | (enc2 >> 4)\n    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2)\n    chr3 = ((enc3 & 3) << 6) | enc4\n    base64 = base64 + String.fromCharCode(chr1)\n\n    if (enc3 != 64 && chr2 != 0) {\n      base64 = base64 + String.fromCharCode(chr2)\n    }\n    if (enc4 != 64 && chr3 != 0) {\n      base64 = base64 + String.fromCharCode(chr3)\n    }\n  }\n  return base64\n}\n\n/**\n * A deferred represents some asynchronous work that is not yet finished, which\n * may or may not culminate in a value.\n * Taken from: https://github.com/mike-north/types/blob/master/src/async.ts\n */\nexport class Deferred<T = any> {\n  public static promiseConstructor: PromiseConstructor = Promise\n\n  public readonly promise!: PromiseLike<T>\n\n  public readonly resolve!: (value?: T | PromiseLike<T>) => void\n\n  public readonly reject!: (reason?: any) => any\n\n  public constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-extra-semi\n    ;(this as any).promise = new Deferred.promiseConstructor((res, rej) => {\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\n      ;(this as any).resolve = res\n      // eslint-disable-next-line @typescript-eslint/no-extra-semi\n      ;(this as any).reject = rej\n    })\n  }\n}\n\n// Taken from: https://stackoverflow.com/questions/38552003/how-to-decode-jwt-token-in-javascript-without-using-a-library\nexport function decodeJWTPayload(token: string) {\n  // Regex checks for base64url format\n  const base64UrlRegex = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}=?$|[a-z0-9_-]{2}(==)?$)$/i\n\n  const parts = token.split('.')\n\n  if (parts.length !== 3) {\n    throw new Error('JWT is not valid: not a JWT structure')\n  }\n\n  if (!base64UrlRegex.test(parts[1])) {\n    throw new Error('JWT is not valid: payload is not in base64url format')\n  }\n\n  const base64Url = parts[1]\n  return JSON.parse(decodeBase64URL(base64Url))\n}\n\n/**\n * Creates a promise that resolves to null after some time.\n */\nexport async function sleep(time: number): Promise<null> {\n  return await new Promise((accept) => {\n    setTimeout(() => accept(null), time)\n  })\n}\n\n/**\n * Converts the provided async function into a retryable function. Each result\n * or thrown error is sent to the isRetryable function which should return true\n * if the function should run again.\n */\nexport function retryable<T>(\n  fn: (attempt: number) => Promise<T>,\n  isRetryable: (attempt: number, error: any | null, result?: T) => boolean\n): Promise<T> {\n  const promise = new Promise<T>((accept, reject) => {\n    // eslint-disable-next-line @typescript-eslint/no-extra-semi\n    ;(async () => {\n      for (let attempt = 0; attempt < Infinity; attempt++) {\n        try {\n          const result = await fn(attempt)\n\n          if (!isRetryable(attempt, null, result)) {\n            accept(result)\n            return\n          }\n        } catch (e: any) {\n          if (!isRetryable(attempt, e)) {\n            reject(e)\n            return\n          }\n        }\n      }\n    })()\n  })\n\n  return promise\n}\n\nfunction dec2hex(dec: number) {\n  return ('0' + dec.toString(16)).substr(-2)\n}\n\n// Functions below taken from: https://stackoverflow.com/questions/63309409/creating-a-code-verifier-and-challenge-for-pkce-auth-on-spotify-api-in-reactjs\nexport function generatePKCEVerifier() {\n  const verifierLength = 56\n  const array = new Uint32Array(verifierLength)\n  if (typeof crypto === 'undefined') {\n    const charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~'\n    const charSetLen = charSet.length\n    let verifier = ''\n    for (let i = 0; i < verifierLength; i++) {\n      verifier += charSet.charAt(Math.floor(Math.random() * charSetLen))\n    }\n    return verifier\n  }\n  crypto.getRandomValues(array)\n  return Array.from(array, dec2hex).join('')\n}\n\nasync function sha256(randomString: string) {\n  const encoder = new TextEncoder()\n  const encodedData = encoder.encode(randomString)\n  const hash = await crypto.subtle.digest('SHA-256', encodedData)\n  const bytes = new Uint8Array(hash)\n\n  return Array.from(bytes)\n    .map((c) => String.fromCharCode(c))\n    .join('')\n}\n\nfunction base64urlencode(str: string) {\n  return btoa(str).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '')\n}\n\nexport async function generatePKCEChallenge(verifier: string) {\n  const hasCryptoSupport =\n    typeof crypto !== 'undefined' &&\n    typeof crypto.subtle !== 'undefined' &&\n    typeof TextEncoder !== 'undefined'\n\n  if (!hasCryptoSupport) {\n    console.warn(\n      'WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.'\n    )\n    return verifier\n  }\n  const hashed = await sha256(verifier)\n  return base64urlencode(hashed)\n}\n\nexport async function getCodeChallengeAndMethod(\n  storage: SupportedStorage,\n  storageKey: string,\n  isPasswordRecovery = false\n) {\n  const codeVerifier = generatePKCEVerifier()\n  let storedCodeVerifier = codeVerifier\n  if (isPasswordRecovery) {\n    storedCodeVerifier += '/PASSWORD_RECOVERY'\n  }\n  await setItemAsync(storage, `${storageKey}-code-verifier`, storedCodeVerifier)\n  const codeChallenge = await generatePKCEChallenge(codeVerifier)\n  const codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256'\n  return [codeChallenge, codeChallengeMethod]\n}\n\n/** Parses the API version which is 2YYY-MM-DD. */\nconst API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i\n\nexport function parseResponseAPIVersion(response: Response) {\n  const apiVersion = response.headers.get(API_VERSION_HEADER_NAME)\n\n  if (!apiVersion) {\n    return null\n  }\n\n  if (!apiVersion.match(API_VERSION_REGEX)) {\n    return null\n  }\n\n  try {\n    const date = new Date(`${apiVersion}T00:00:00.0Z`)\n    return date\n  } catch (e: any) {\n    return null\n  }\n}\n", "import { WeakPasswordReasons } from './types'\nimport { ErrorCode } from './error-codes'\n\nexport class AuthError extends Error {\n  /**\n   * Error code associated with the error. Most errors coming from\n   * HTTP responses will have a code, though some errors that occur\n   * before a response is received will not have one present. In that\n   * case {@link #status} will also be undefined.\n   */\n  code: ErrorCode | string | undefined\n\n  /** HTTP status code that caused the error. */\n  status: number | undefined\n\n  protected __isAuthError = true\n\n  constructor(message: string, status?: number, code?: string) {\n    super(message)\n    this.name = 'AuthError'\n    this.status = status\n    this.code = code\n  }\n}\n\nexport function isAuthError(error: unknown): error is AuthError {\n  return typeof error === 'object' && error !== null && '__isAuthError' in error\n}\n\nexport class AuthApiError extends AuthError {\n  status: number\n\n  constructor(message: string, status: number, code: string | undefined) {\n    super(message, status, code)\n    this.name = 'AuthApiError'\n    this.status = status\n    this.code = code\n  }\n}\n\nexport function isAuthApiError(error: unknown): error is AuthApiError {\n  return isAuthError(error) && error.name === 'AuthApiError'\n}\n\nexport class AuthUnknownError extends AuthError {\n  originalError: unknown\n\n  constructor(message: string, originalError: unknown) {\n    super(message)\n    this.name = 'AuthUnknownError'\n    this.originalError = originalError\n  }\n}\n\nexport class CustomAuthError extends AuthError {\n  name: string\n  status: number\n\n  constructor(message: string, name: string, status: number, code: string | undefined) {\n    super(message, status, code)\n    this.name = name\n    this.status = status\n  }\n}\n\nexport class AuthSessionMissingError extends CustomAuthError {\n  constructor() {\n    super('Auth session missing!', 'AuthSessionMissingError', 400, undefined)\n  }\n}\n\nexport class AuthInvalidTokenResponseError extends CustomAuthError {\n  constructor() {\n    super('Auth session or user missing', 'AuthInvalidTokenResponseError', 500, undefined)\n  }\n}\n\nexport class AuthInvalidCredentialsError extends CustomAuthError {\n  constructor(message: string) {\n    super(message, 'AuthInvalidCredentialsError', 400, undefined)\n  }\n}\n\nexport class AuthImplicitGrantRedirectError extends CustomAuthError {\n  details: { error: string; code: string } | null = null\n  constructor(message: string, details: { error: string; code: string } | null = null) {\n    super(message, 'AuthImplicitGrantRedirectError', 500, undefined)\n    this.details = details\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      details: this.details,\n    }\n  }\n}\n\nexport class AuthPKCEGrantCodeExchangeError extends CustomAuthError {\n  details: { error: string; code: string } | null = null\n\n  constructor(message: string, details: { error: string; code: string } | null = null) {\n    super(message, 'AuthPKCEGrantCodeExchangeError', 500, undefined)\n    this.details = details\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      details: this.details,\n    }\n  }\n}\n\nexport class AuthRetryableFetchError extends CustomAuthError {\n  constructor(message: string, status: number) {\n    super(message, 'AuthRetryableFetchError', status, undefined)\n  }\n}\n\nexport function isAuthRetryableFetchError(error: unknown): error is AuthRetryableFetchError {\n  return isAuthError(error) && error.name === 'AuthRetryableFetchError'\n}\n\n/**\n * This error is thrown on certain methods when the password used is deemed\n * weak. Inspect the reasons to identify what password strength rules are\n * inadequate.\n */\nexport class AuthWeakPasswordError extends CustomAuthError {\n  /**\n   * Reasons why the password is deemed weak.\n   */\n  reasons: WeakPasswordReasons[]\n\n  constructor(message: string, status: number, reasons: string[]) {\n    super(message, 'AuthWeakPasswordError', status, 'weak_password')\n\n    this.reasons = reasons\n  }\n}\n\nexport function isAuthWeakPasswordError(error: unknown): error is AuthWeakPasswordError {\n  return isAuthError(error) && error.name === 'AuthWeakPasswordError'\n}\n", "import { API_VERSIONS, API_VERSION_HEADER_NAME } from './constants'\nimport { expiresAt, looksLikeFetchResponse, parseResponseAPIVersion } from './helpers'\nimport {\n  AuthResponse,\n  AuthResponsePassword,\n  SSOResponse,\n  GenerateLinkProperties,\n  GenerateLinkResponse,\n  User,\n  UserResponse,\n} from './types'\nimport {\n  AuthApiError,\n  AuthRetryableFetchError,\n  AuthWeakPasswordError,\n  AuthUnknownError,\n} from './errors'\n\nexport type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport interface FetchParameters {\n  signal?: AbortSignal\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst NETWORK_ERROR_CODES = [502, 503, 504]\n\nexport async function handleError(error: unknown) {\n  if (!looksLikeFetchResponse(error)) {\n    throw new AuthRetryableFetchError(_getErrorMessage(error), 0)\n  }\n\n  if (NETWORK_ERROR_CODES.includes(error.status)) {\n    // status in 500...599 range - server had an error, request might be retryed.\n    throw new AuthRetryableFetchError(_getErrorMessage(error), error.status)\n  }\n\n  let data: any\n  try {\n    data = await error.json()\n  } catch (e: any) {\n    throw new AuthUnknownError(_getErrorMessage(e), e)\n  }\n\n  let errorCode: string | undefined = undefined\n\n  const responseAPIVersion = parseResponseAPIVersion(error)\n  if (\n    responseAPIVersion &&\n    responseAPIVersion.getTime() >= API_VERSIONS['2024-01-01'].timestamp &&\n    typeof data === 'object' &&\n    data &&\n    typeof data.code === 'string'\n  ) {\n    errorCode = data.code\n  } else if (typeof data === 'object' && data && typeof data.error_code === 'string') {\n    errorCode = data.error_code\n  }\n\n  if (!errorCode) {\n    // Legacy support for weak password errors, when there were no error codes\n    if (\n      typeof data === 'object' &&\n      data &&\n      typeof data.weak_password === 'object' &&\n      data.weak_password &&\n      Array.isArray(data.weak_password.reasons) &&\n      data.weak_password.reasons.length &&\n      data.weak_password.reasons.reduce((a: boolean, i: any) => a && typeof i === 'string', true)\n    ) {\n      throw new AuthWeakPasswordError(\n        _getErrorMessage(data),\n        error.status,\n        data.weak_password.reasons\n      )\n    }\n  } else if (errorCode === 'weak_password') {\n    throw new AuthWeakPasswordError(\n      _getErrorMessage(data),\n      error.status,\n      data.weak_password?.reasons || []\n    )\n  }\n\n  throw new AuthApiError(_getErrorMessage(data), error.status || 500, errorCode)\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json;charset=UTF-8', ...options?.headers }\n  params.body = JSON.stringify(body)\n  return { ...params, ...parameters }\n}\n\ninterface GotrueRequestOptions extends FetchOptions {\n  jwt?: string\n  redirectTo?: string\n  body?: object\n  query?: { [key: string]: string }\n  /**\n   * Function that transforms api response from gotrue into a desirable / standardised format\n   */\n  xform?: (data: any) => any\n}\n\nexport async function _request(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: GotrueRequestOptions\n) {\n  const headers = {\n    ...options?.headers,\n  }\n\n  if (!headers[API_VERSION_HEADER_NAME]) {\n    headers[API_VERSION_HEADER_NAME] = API_VERSIONS['2024-01-01'].name\n  }\n\n  if (options?.jwt) {\n    headers['Authorization'] = `Bearer ${options.jwt}`\n  }\n\n  const qs = options?.query ?? {}\n  if (options?.redirectTo) {\n    qs['redirect_to'] = options.redirectTo\n  }\n\n  const queryString = Object.keys(qs).length ? '?' + new URLSearchParams(qs).toString() : ''\n  const data = await _handleRequest(\n    fetcher,\n    method,\n    url + queryString,\n    {\n      headers,\n      noResolveJson: options?.noResolveJson,\n    },\n    {},\n    options?.body\n  )\n  return options?.xform ? options?.xform(data) : { data: { ...data }, error: null }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  const requestParams = _getRequestParams(method, options, parameters, body)\n\n  let result: any\n\n  try {\n    result = await fetcher(url, {\n      ...requestParams,\n    })\n  } catch (e) {\n    console.error(e)\n\n    // fetch failed, likely due to a network or CORS error\n    throw new AuthRetryableFetchError(_getErrorMessage(e), 0)\n  }\n\n  if (!result.ok) {\n    await handleError(result)\n  }\n\n  if (options?.noResolveJson) {\n    return result\n  }\n\n  try {\n    return await result.json()\n  } catch (e: any) {\n    await handleError(e)\n  }\n}\n\nexport function _sessionResponse(data: any): AuthResponse {\n  let session = null\n  if (hasSession(data)) {\n    session = { ...data }\n\n    if (!data.expires_at) {\n      session.expires_at = expiresAt(data.expires_in)\n    }\n  }\n\n  const user: User = data.user ?? (data as User)\n  return { data: { session, user }, error: null }\n}\n\nexport function _sessionResponsePassword(data: any): AuthResponsePassword {\n  const response = _sessionResponse(data) as AuthResponsePassword\n\n  if (\n    !response.error &&\n    data.weak_password &&\n    typeof data.weak_password === 'object' &&\n    Array.isArray(data.weak_password.reasons) &&\n    data.weak_password.reasons.length &&\n    data.weak_password.message &&\n    typeof data.weak_password.message === 'string' &&\n    data.weak_password.reasons.reduce((a: boolean, i: any) => a && typeof i === 'string', true)\n  ) {\n    response.data.weak_password = data.weak_password\n  }\n\n  return response\n}\n\nexport function _userResponse(data: any): UserResponse {\n  const user: User = data.user ?? (data as User)\n  return { data: { user }, error: null }\n}\n\nexport function _ssoResponse(data: any): SSOResponse {\n  return { data, error: null }\n}\n\nexport function _generateLinkResponse(data: any): GenerateLinkResponse {\n  const { action_link, email_otp, hashed_token, redirect_to, verification_type, ...rest } = data\n\n  const properties: GenerateLinkProperties = {\n    action_link,\n    email_otp,\n    hashed_token,\n    redirect_to,\n    verification_type,\n  }\n\n  const user: User = { ...rest }\n  return {\n    data: {\n      properties,\n      user,\n    },\n    error: null,\n  }\n}\n\nexport function _noResolveJsonResponse(data: any): Response {\n  return data\n}\n\n/**\n * hasSession checks if the response object contains a valid session\n * @param data A response object\n * @returns true if a session is in the response\n */\nfunction hasSession(data: any): boolean {\n  return data.access_token && data.refresh_token && data.expires_in\n}\n", "import {\n  Fetch,\n  _generateLinkResponse,\n  _noResolveJsonResponse,\n  _request,\n  _userResponse,\n} from './lib/fetch'\nimport { resolveFetch } from './lib/helpers'\nimport {\n  AdminUserAttributes,\n  GenerateLinkParams,\n  GenerateLinkResponse,\n  Pagination,\n  User,\n  UserResponse,\n  GoTrueAdminMFAApi,\n  AuthMFAAdminDeleteFactorParams,\n  AuthMFAAdminDeleteFactorResponse,\n  AuthMFAAdminListFactorsParams,\n  AuthMFAAdminListFactorsResponse,\n  PageParams,\n} from './lib/types'\nimport { AuthError, isAuthError } from './lib/errors'\n\nexport default class GoTrueAdminApi {\n  /** Contains all MFA administration methods. */\n  mfa: GoTrueAdminMFAApi\n\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.fetch = resolveFetch(fetch)\n    this.mfa = {\n      listFactors: this._listFactors.bind(this),\n      deleteFactor: this._deleteFactor.bind(this),\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   * @param scope The logout sope.\n   */\n  async signOut(\n    jwt: string,\n    scope: 'global' | 'local' | 'others' = 'global'\n  ): Promise<{ data: null; error: AuthError | null }> {\n    try {\n      await _request(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {\n        headers: this.headers,\n        jwt,\n        noResolveJson: true,\n      })\n      return { data: null, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param options Additional options to be included when inviting.\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      /** A custom data object to store additional metadata about the user. This maps to the `auth.users.user_metadata` column. */\n      data?: object\n\n      /** The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL. */\n      redirectTo?: string\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/invite`, {\n        body: { email, data: options.data },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates email links and OTPs to be sent via a custom email provider.\n   * @param email The user's email.\n   * @param options.password User password. For signup only.\n   * @param options.data Optional user metadata. For signup only.\n   * @param options.redirectTo The redirect url which should be appended to the generated link\n   */\n  async generateLink(params: GenerateLinkParams): Promise<GenerateLinkResponse> {\n    try {\n      const { options, ...rest } = params\n      const body: any = { ...rest, ...options }\n      if ('newEmail' in rest) {\n        // replace newEmail with new_email in request body\n        body.new_email = rest?.newEmail\n        delete body['newEmail']\n      }\n      return await _request(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\n        body: body,\n        headers: this.headers,\n        xform: _generateLinkResponse,\n        redirectTo: options?.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return {\n          data: {\n            properties: null,\n            user: null,\n          },\n          error,\n        }\n      }\n      throw error\n    }\n  }\n\n  // User Admin API\n  /**\n   * Creates a new user.\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/admin/users`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\n   */\n  async listUsers(\n    params?: PageParams\n  ): Promise<\n    | { data: { users: User[]; aud: string } & Pagination; error: null }\n    | { data: { users: [] }; error: AuthError }\n  > {\n    try {\n      const pagination: Pagination = { nextPage: null, lastPage: 0, total: 0 }\n      const response = await _request(this.fetch, 'GET', `${this.url}/admin/users`, {\n        headers: this.headers,\n        noResolveJson: true,\n        query: {\n          page: params?.page?.toString() ?? '',\n          per_page: params?.perPage?.toString() ?? '',\n        },\n        xform: _noResolveJsonResponse,\n      })\n      if (response.error) throw response.error\n\n      const users = await response.json()\n      const total = response.headers.get('x-total-count') ?? 0\n      const links = response.headers.get('link')?.split(',') ?? []\n      if (links.length > 0) {\n        links.forEach((link: string) => {\n          const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1))\n          const rel = JSON.parse(link.split(';')[1].split('=')[1])\n          pagination[`${rel}Page`] = page\n        })\n\n        pagination.total = parseInt(total)\n      }\n      return { data: { ...users, ...pagination }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { users: [] }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(uid: string): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\n        body: attributes,\n        headers: this.headers,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * @param id The user id you want to remove.\n   * @param shouldSoftDelete If true, then the user will be soft-deleted (setting `deleted_at` to the current timestamp and disabling their account while preserving their data) from the auth schema.\n   * Defaults to false for backward compatibility.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async deleteUser(id: string, shouldSoftDelete = false): Promise<UserResponse> {\n    try {\n      return await _request(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\n        headers: this.headers,\n        body: {\n          should_soft_delete: shouldSoftDelete,\n        },\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _listFactors(\n    params: AuthMFAAdminListFactorsParams\n  ): Promise<AuthMFAAdminListFactorsResponse> {\n    try {\n      const { data, error } = await _request(\n        this.fetch,\n        'GET',\n        `${this.url}/admin/users/${params.userId}/factors`,\n        {\n          headers: this.headers,\n          xform: (factors: any) => {\n            return { data: { factors }, error: null }\n          },\n        }\n      )\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private async _deleteFactor(\n    params: AuthMFAAdminDeleteFactorParams\n  ): Promise<AuthMFAAdminDeleteFactorResponse> {\n    try {\n      const data = await _request(\n        this.fetch,\n        'DELETE',\n        `${this.url}/admin/users/${params.userId}/factors/${params.id}`,\n        {\n          headers: this.headers,\n        }\n      )\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n}\n", "import { supportsLocalStorage } from './helpers'\nimport { SupportedStorage } from './types'\n\n/**\n * Provides safe access to the globalThis.localStorage property.\n */\nexport const localStorageAdapter: SupportedStorage = {\n  getItem: (key) => {\n    if (!supportsLocalStorage()) {\n      return null\n    }\n\n    return globalThis.localStorage.getItem(key)\n  },\n  setItem: (key, value) => {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    globalThis.localStorage.setItem(key, value)\n  },\n  removeItem: (key) => {\n    if (!supportsLocalStorage()) {\n      return\n    }\n\n    globalThis.localStorage.removeItem(key)\n  },\n}\n\n/**\n * Returns a localStorage-like object that stores the key-value pairs in\n * memory.\n */\nexport function memoryLocalStorageAdapter(store: { [key: string]: string } = {}): SupportedStorage {\n  return {\n    getItem: (key) => {\n      return store[key] || null\n    },\n\n    setItem: (key, value) => {\n      store[key] = value\n    },\n\n    removeItem: (key) => {\n      delete store[key]\n    },\n  }\n}\n", "/**\n * https://mathiasbynens.be/notes/globalthis\n */\nexport function polyfillGlobalThis() {\n  if (typeof globalThis === 'object') return\n  try {\n    Object.defineProperty(Object.prototype, '__magic__', {\n      get: function () {\n        return this\n      },\n      configurable: true,\n    })\n    // @ts-expect-error 'Allow access to magic'\n    __magic__.globalThis = __magic__\n    // @ts-expect-error 'Allow access to magic'\n    delete Object.prototype.__magic__\n  } catch (e) {\n    if (typeof self !== 'undefined') {\n      // @ts-expect-error 'Allow access to globals'\n      self.globalThis = self\n    }\n  }\n}\n", "import { supportsLocalStorage } from './helpers'\n\n/**\n * @experimental\n */\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(\n    globalThis &&\n    supportsLocalStorage() &&\n    globalThis.localStorage &&\n    globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'\n  ),\n}\n\n/**\n * An error thrown when a lock cannot be acquired after some amount of time.\n *\n * Use the {@link #isAcquireTimeout} property instead of checking with `instanceof`.\n */\nexport abstract class LockAcquireTimeoutError extends Error {\n  public readonly isAcquireTimeout = true\n\n  constructor(message: string) {\n    super(message)\n  }\n}\n\nexport class NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {}\n\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock<R>(\n  name: string,\n  acquireTimeout: number,\n  fn: () => Promise<R>\n): Promise<R> {\n  if (internals.debug) {\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout)\n  }\n\n  const abortController = new globalThis.AbortController()\n\n  if (acquireTimeout > 0) {\n    setTimeout(() => {\n      abortController.abort()\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name)\n      }\n    }, acquireTimeout)\n  }\n\n  // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\n\n  return await globalThis.navigator.locks.request(\n    name,\n    acquireTimeout === 0\n      ? {\n          mode: 'exclusive',\n          ifAvailable: true,\n        }\n      : {\n          mode: 'exclusive',\n          signal: abortController.signal,\n        },\n    async (lock) => {\n      if (lock) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name)\n        }\n\n        try {\n          return await fn()\n        } finally {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name)\n          }\n        }\n      } else {\n        if (acquireTimeout === 0) {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name)\n          }\n\n          throw new NavigatorLockAcquireTimeoutError(\n            `Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`\n          )\n        } else {\n          if (internals.debug) {\n            try {\n              const result = await globalThis.navigator.locks.query()\n\n              console.log(\n                '@supabase/gotrue-js: Navigator LockManager state',\n                JSON.stringify(result, null, '  ')\n              )\n            } catch (e: any) {\n              console.warn(\n                '@supabase/gotrue-js: Error when querying Navigator LockManager state',\n                e\n              )\n            }\n          }\n\n          // Browser is not following the Navigator LockManager spec, it\n          // returned a null lock when we didn't use ifAvailable. So we can\n          // pretend the lock is acquired in the name of backward compatibility\n          // and user experience and just run the function.\n          console.warn(\n            '@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request'\n          )\n\n          return await fn()\n        }\n      }\n    }\n  )\n}\n", "import GoTrueAdminApi from './GoTrueAdminApi'\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants'\nimport {\n  AuthError,\n  AuthImplicitGrantRedirectError,\n  AuthPKCEGrantCodeExchangeError,\n  AuthInvalidCredentialsError,\n  AuthSessionMissingError,\n  AuthInvalidTokenResponseError,\n  AuthUnknownError,\n  isAuthApiError,\n  isAuthError,\n  isAuthRetryableFetchError,\n} from './lib/errors'\nimport {\n  Fetch,\n  _request,\n  _sessionResponse,\n  _sessionResponsePassword,\n  _userResponse,\n  _ssoResponse,\n} from './lib/fetch'\nimport {\n  decodeJWTPayload,\n  Deferred,\n  getItemAsync,\n  isBrowser,\n  removeItemAsync,\n  resolveFetch,\n  setItemAsync,\n  uuid,\n  retryable,\n  sleep,\n  supportsLocalStorage,\n  parseParametersFromURL,\n  getCodeChallengeAndMethod,\n} from './lib/helpers'\nimport { localStorageAdapter, memoryLocalStorageAdapter } from './lib/local-storage'\nimport { polyfillGlobalThis } from './lib/polyfills'\nimport { version } from './lib/version'\nimport { LockAcquireTimeoutError, navigatorLock } from './lib/locks'\n\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  AuthResponsePassword,\n  AuthTokenResponse,\n  AuthTokenResponsePassword,\n  AuthOtpResponse,\n  CallRefreshTokenResult,\n  GoTrueClientOptions,\n  InitializeResult,\n  OAuthResponse,\n  SSOResponse,\n  Provider,\n  Session,\n  SignInWithIdTokenCredentials,\n  SignInWithOAuthCredentials,\n  SignInWithPasswordCredentials,\n  SignInWithPasswordlessCredentials,\n  SignUpWithPasswordCredentials,\n  SignInWithSSO,\n  SignOut,\n  Subscription,\n  SupportedStorage,\n  User,\n  UserAttributes,\n  UserResponse,\n  VerifyOtpParams,\n  GoTrueMFAApi,\n  MFAEnrollParams,\n  AuthMFAEnrollResponse,\n  MFAChallengeParams,\n  AuthMFAChallengeResponse,\n  MFAUnenrollParams,\n  AuthMFAUnenrollResponse,\n  MFAVerifyParams,\n  AuthMFAVerifyResponse,\n  AuthMFAListFactorsResponse,\n  AMREntry,\n  AuthMFAGetAuthenticatorAssuranceLevelResponse,\n  AuthenticatorAssuranceLevels,\n  Factor,\n  MFAChallengeAndVerifyParams,\n  ResendParams,\n  AuthFlowType,\n  LockFunc,\n  UserIdentity,\n  SignInAnonymouslyCredentials,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS: Omit<Required<GoTrueClientOptions>, 'fetch' | 'storage' | 'lock'> = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS,\n  flowType: 'implicit',\n  debug: false,\n  hasCustomAuthorizationHeader: false,\n}\n\n/** Current session will be checked for refresh at this interval. */\nconst AUTO_REFRESH_TICK_DURATION = 30 * 1000\n\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nconst AUTO_REFRESH_TICK_THRESHOLD = 3\n\nasync function lockNoOp<R>(name: string, acquireTimeout: number, fn: () => Promise<R>): Promise<R> {\n  return await fn()\n}\n\nexport default class GoTrueClient {\n  private static nextInstanceID = 0\n\n  private instanceID: number\n\n  /**\n   * Namespace for the GoTrue admin methods.\n   * These methods should only be used in a trusted server-side environment.\n   */\n  admin: GoTrueAdminApi\n  /**\n   * Namespace for the MFA methods.\n   */\n  mfa: GoTrueMFAApi\n  /**\n   * The storage key used to identify the values saved in localStorage\n   */\n  protected storageKey: string\n\n  protected flowType: AuthFlowType\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected storage: SupportedStorage\n  protected memoryStorage: { [key: string]: string } | null = null\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected autoRefreshTicker: ReturnType<typeof setInterval> | null = null\n  protected visibilityChangedCallback: (() => Promise<any>) | null = null\n  protected refreshingDeferred: Deferred<CallRefreshTokenResult> | null = null\n  /**\n   * Keeps track of the async client initialization.\n   * When null or not yet resolved the auth state is `unknown`\n   * Once resolved the the auth state is known and it's save to call any further client methods.\n   * Keep extra care to never reject or throw uncaught errors\n   */\n  protected initializePromise: Promise<InitializeResult> | null = null\n  protected detectSessionInUrl = true\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected hasCustomAuthorizationHeader = false\n  protected fetch: Fetch\n  protected lock: LockFunc\n  protected lockAcquired = false\n  protected pendingInLock: Promise<any>[] = []\n\n  /**\n   * Used to broadcast state change events to other tabs listening.\n   */\n  protected broadcastChannel: BroadcastChannel | null = null\n\n  protected logDebugMessages: boolean\n  protected logger: (message: string, ...args: any[]) => void = console.log\n\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options: GoTrueClientOptions) {\n    this.instanceID = GoTrueClient.nextInstanceID\n    GoTrueClient.nextInstanceID += 1\n\n    if (this.instanceID > 0 && isBrowser()) {\n      console.warn(\n        'Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.'\n      )\n    }\n\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n\n    this.logDebugMessages = !!settings.debug\n    if (typeof settings.debug === 'function') {\n      this.logger = settings.debug\n    }\n\n    this.persistSession = settings.persistSession\n    this.storageKey = settings.storageKey\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch,\n    })\n\n    this.url = settings.url\n    this.headers = settings.headers\n    this.fetch = resolveFetch(settings.fetch)\n    this.lock = settings.lock || lockNoOp\n    this.detectSessionInUrl = settings.detectSessionInUrl\n    this.flowType = settings.flowType\n    this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader\n\n    if (settings.lock) {\n      this.lock = settings.lock\n    } else if (isBrowser() && globalThis?.navigator?.locks) {\n      this.lock = navigatorLock\n    } else {\n      this.lock = lockNoOp\n    }\n\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n    }\n\n    if (this.persistSession) {\n      if (settings.storage) {\n        this.storage = settings.storage\n      } else {\n        if (supportsLocalStorage()) {\n          this.storage = localStorageAdapter\n        } else {\n          this.memoryStorage = {}\n          this.storage = memoryLocalStorageAdapter(this.memoryStorage)\n        }\n      }\n    } else {\n      this.memoryStorage = {}\n      this.storage = memoryLocalStorageAdapter(this.memoryStorage)\n    }\n\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      try {\n        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey)\n      } catch (e: any) {\n        console.error(\n          'Failed to create a new BroadcastChannel, multi-tab state changes will not be available',\n          e\n        )\n      }\n\n      this.broadcastChannel?.addEventListener('message', async (event) => {\n        this._debug('received broadcast notification from other tab or client', event)\n\n        await this._notifyAllSubscribers(event.data.event, event.data.session, false) // broadcast = false so we don't get an endless loop of messages\n      })\n    }\n\n    this.initialize()\n  }\n\n  private _debug(...args: any[]): GoTrueClient {\n    if (this.logDebugMessages) {\n      this.logger(\n        `GoTrueClient@${this.instanceID} (${version}) ${new Date().toISOString()}`,\n        ...args\n      )\n    }\n\n    return this\n  }\n\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  async initialize(): Promise<InitializeResult> {\n    if (this.initializePromise) {\n      return await this.initializePromise\n    }\n\n    this.initializePromise = (async () => {\n      return await this._acquireLock(-1, async () => {\n        return await this._initialize()\n      })\n    })()\n\n    return await this.initializePromise\n  }\n\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  private async _initialize(): Promise<InitializeResult> {\n    try {\n      const isPKCEFlow = isBrowser() ? await this._isPKCEFlow() : false\n      this._debug('#_initialize()', 'begin', 'is PKCE flow', isPKCEFlow)\n\n      if (isPKCEFlow || (this.detectSessionInUrl && this._isImplicitGrantFlow())) {\n        const { data, error } = await this._getSessionFromURL(isPKCEFlow)\n        if (error) {\n          this._debug('#_initialize()', 'error detecting session from URL', error)\n\n          // hacky workaround to keep the existing session if there's an error returned from identity linking\n          // TODO: once error codes are ready, we should match against it instead of the message\n          if (\n            error?.message === 'Identity is already linked' ||\n            error?.message === 'Identity is already linked to another user'\n          ) {\n            return { error }\n          }\n\n          // failed login attempt via url,\n          // remove old session as in verifyOtp, signUp and signInWith*\n          await this._removeSession()\n\n          return { error }\n        }\n\n        const { session, redirectType } = data\n\n        this._debug(\n          '#_initialize()',\n          'detected session in URL',\n          session,\n          'redirect type',\n          redirectType\n        )\n\n        await this._saveSession(session)\n\n        setTimeout(async () => {\n          if (redirectType === 'recovery') {\n            await this._notifyAllSubscribers('PASSWORD_RECOVERY', session)\n          } else {\n            await this._notifyAllSubscribers('SIGNED_IN', session)\n          }\n        }, 0)\n\n        return { error: null }\n      }\n      // no login attempt via callback url try to recover session from storage\n      await this._recoverAndRefresh()\n      return { error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { error }\n      }\n\n      return {\n        error: new AuthUnknownError('Unexpected error during initialization', error),\n      }\n    } finally {\n      await this._handleVisibilityChange()\n      this._debug('#_initialize()', 'end')\n    }\n  }\n\n  /**\n   * Creates a new anonymous user.\n   *\n   * @returns A session where the is_anonymous claim in the access token JWT set to true\n   */\n  async signInAnonymously(credentials?: SignInAnonymouslyCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      const res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n        headers: this.headers,\n        body: {\n          data: credentials?.options?.data ?? {},\n          gotrue_meta_security: { captcha_token: credentials?.options?.captchaToken },\n        },\n        xform: _sessionResponse,\n      })\n      const { data, error } = res\n\n      if (error || !data) {\n        return { data: { user: null, session: null }, error: error }\n      }\n      const session: Session | null = data.session\n      const user: User | null = data.user\n\n      if (data.session) {\n        await this._saveSession(data.session)\n        await this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUp(credentials: SignUpWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        let codeChallenge: string | null = null\n        let codeChallengeMethod: string | null = null\n        if (this.flowType === 'pkce') {\n          ;[codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(\n            this.storage,\n            this.storageKey\n          )\n        }\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          redirectTo: options?.emailRedirectTo,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            channel: options?.channel ?? 'sms',\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n\n      const { data, error } = res\n\n      if (error || !data) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      const session: Session | null = data.session\n      const user: User | null = data.user\n\n      if (data.session) {\n        await this._saveSession(data.session)\n        await this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login.\n   */\n  async signInWithPassword(\n    credentials: SignInWithPasswordCredentials\n  ): Promise<AuthTokenResponsePassword> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponsePassword\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            email,\n            password,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponsePassword,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponsePassword,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n      const { data, error } = res\n\n      if (error) {\n        return { data: { user: null, session: null }, error }\n      } else if (!data || !data.session || !data.user) {\n        return { data: { user: null, session: null }, error: new AuthInvalidTokenResponseError() }\n      }\n      if (data.session) {\n        await this._saveSession(data.session)\n        await this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return {\n        data: {\n          user: data.user,\n          session: data.session,\n          ...(data.weak_password ? { weakPassword: data.weak_password } : null),\n        },\n        error,\n      }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user via a third-party provider.\n   * This method supports the PKCE flow.\n   */\n  async signInWithOAuth(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\n    await this._removeSession()\n\n    return await this._handleProviderSignIn(credentials.provider, {\n      redirectTo: credentials.options?.redirectTo,\n      scopes: credentials.options?.scopes,\n      queryParams: credentials.options?.queryParams,\n      skipBrowserRedirect: credentials.options?.skipBrowserRedirect,\n    })\n  }\n\n  /**\n   * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.\n   */\n  async exchangeCodeForSession(authCode: string): Promise<AuthTokenResponse> {\n    await this.initializePromise\n\n    return this._acquireLock(-1, async () => {\n      return this._exchangeCodeForSession(authCode)\n    })\n  }\n\n  private async _exchangeCodeForSession(authCode: string): Promise<\n    | {\n        data: { session: Session; user: User; redirectType: string | null }\n        error: null\n      }\n    | { data: { session: null; user: null; redirectType: null }; error: AuthError }\n  > {\n    const storageItem = await getItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n    const [codeVerifier, redirectType] = ((storageItem ?? '') as string).split('/')\n    const { data, error } = await _request(\n      this.fetch,\n      'POST',\n      `${this.url}/token?grant_type=pkce`,\n      {\n        headers: this.headers,\n        body: {\n          auth_code: authCode,\n          code_verifier: codeVerifier,\n        },\n        xform: _sessionResponse,\n      }\n    )\n    await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n    if (error) {\n      return { data: { user: null, session: null, redirectType: null }, error }\n    } else if (!data || !data.session || !data.user) {\n      return {\n        data: { user: null, session: null, redirectType: null },\n        error: new AuthInvalidTokenResponseError(),\n      }\n    }\n    if (data.session) {\n      await this._saveSession(data.session)\n      await this._notifyAllSubscribers('SIGNED_IN', data.session)\n    }\n    return { data: { ...data, redirectType: redirectType ?? null }, error }\n  }\n\n  /**\n   * Allows signing in with an OIDC ID token. The authentication provider used\n   * should be enabled and configured.\n   */\n  async signInWithIdToken(credentials: SignInWithIdTokenCredentials): Promise<AuthTokenResponse> {\n    await this._removeSession()\n\n    try {\n      const { options, provider, token, access_token, nonce } = credentials\n\n      const res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n        headers: this.headers,\n        body: {\n          provider,\n          id_token: token,\n          access_token,\n          nonce,\n          gotrue_meta_security: { captcha_token: options?.captchaToken },\n        },\n        xform: _sessionResponse,\n      })\n\n      const { data, error } = res\n      if (error) {\n        return { data: { user: null, session: null }, error }\n      } else if (!data || !data.session || !data.user) {\n        return {\n          data: { user: null, session: null },\n          error: new AuthInvalidTokenResponseError(),\n        }\n      }\n      if (data.session) {\n        await this._saveSession(data.session)\n        await this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   *\n   * Do note that you will need to configure a Whatsapp sender on Twilio\n   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\n   * channel is not supported on other providers\n   * at this time.\n   * This method supports PKCE when an email is passed.\n   */\n  async signInWithOtp(credentials: SignInWithPasswordlessCredentials): Promise<AuthOtpResponse> {\n    try {\n      await this._removeSession()\n\n      if ('email' in credentials) {\n        const { email, options } = credentials\n        let codeChallenge: string | null = null\n        let codeChallengeMethod: string | null = null\n        if (this.flowType === 'pkce') {\n          ;[codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(\n            this.storage,\n            this.storageKey\n          )\n        }\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            email,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n          },\n          redirectTo: options?.emailRedirectTo,\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      if ('phone' in credentials) {\n        const { phone, options } = credentials\n        const { data, error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            phone,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n            channel: options?.channel ?? 'sms',\n          },\n        })\n        return { data: { user: null, session: null, messageId: data?.message_id }, error }\n      }\n      throw new AuthInvalidCredentialsError('You must provide either an email or phone number.')\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP or TokenHash received through mobile or email.\n   */\n  async verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\n    try {\n      if (params.type !== 'email_change' && params.type !== 'phone_change') {\n        // we don't want to remove the authenticated session if the user is performing an email_change or phone_change verification\n        await this._removeSession()\n      }\n\n      let redirectTo = undefined\n      let captchaToken = undefined\n      if ('options' in params) {\n        redirectTo = params.options?.redirectTo\n        captchaToken = params.options?.captchaToken\n      }\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\n        headers: this.headers,\n        body: {\n          ...params,\n          gotrue_meta_security: { captcha_token: captchaToken },\n        },\n        redirectTo,\n        xform: _sessionResponse,\n      })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw new Error('An error occurred on token verification.')\n      }\n\n      const session: Session | null = data.session\n      const user: User = data.user\n\n      if (session?.access_token) {\n        await this._saveSession(session as Session)\n        await this._notifyAllSubscribers(\n          params.type == 'recovery' ? 'PASSWORD_RECOVERY' : 'SIGNED_IN',\n          session\n        )\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   */\n  async signInWithSSO(params: SignInWithSSO): Promise<SSOResponse> {\n    try {\n      await this._removeSession()\n      let codeChallenge: string | null = null\n      let codeChallengeMethod: string | null = null\n      if (this.flowType === 'pkce') {\n        ;[codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(\n          this.storage,\n          this.storageKey\n        )\n      }\n\n      return await _request(this.fetch, 'POST', `${this.url}/sso`, {\n        body: {\n          ...('providerId' in params ? { provider_id: params.providerId } : null),\n          ...('domain' in params ? { domain: params.domain } : null),\n          redirect_to: params.options?.redirectTo ?? undefined,\n          ...(params?.options?.captchaToken\n            ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n            : null),\n          skip_http_redirect: true, // fetch does not handle redirects\n          code_challenge: codeChallenge,\n          code_challenge_method: codeChallengeMethod,\n        },\n        headers: this.headers,\n        xform: _ssoResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Sends a reauthentication OTP to the user's email or phone number.\n   * Requires the user to be signed-in.\n   */\n  async reauthenticate(): Promise<AuthResponse> {\n    await this.initializePromise\n\n    return await this._acquireLock(-1, async () => {\n      return await this._reauthenticate()\n    })\n  }\n\n  private async _reauthenticate(): Promise<AuthResponse> {\n    try {\n      return await this._useSession(async (result) => {\n        const {\n          data: { session },\n          error: sessionError,\n        } = result\n        if (sessionError) throw sessionError\n        if (!session) throw new AuthSessionMissingError()\n\n        const { error } = await _request(this.fetch, 'GET', `${this.url}/reauthenticate`, {\n          headers: this.headers,\n          jwt: session.access_token,\n        })\n        return { data: { user: null, session: null }, error }\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\n   */\n  async resend(credentials: ResendParams): Promise<AuthOtpResponse> {\n    try {\n      if (credentials.type != 'email_change' && credentials.type != 'phone_change') {\n        await this._removeSession()\n      }\n\n      const endpoint = `${this.url}/resend`\n      if ('email' in credentials) {\n        const { email, type, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', endpoint, {\n          headers: this.headers,\n          body: {\n            email,\n            type,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          redirectTo: options?.emailRedirectTo,\n        })\n        return { data: { user: null, session: null }, error }\n      } else if ('phone' in credentials) {\n        const { phone, type, options } = credentials\n        const { data, error } = await _request(this.fetch, 'POST', endpoint, {\n          headers: this.headers,\n          body: {\n            phone,\n            type,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n        })\n        return { data: { user: null, session: null, messageId: data?.message_id }, error }\n      }\n      throw new AuthInvalidCredentialsError(\n        'You must provide either an email or phone number and a type'\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Returns the session, refreshing it if necessary.\n   *\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   *\n   * **IMPORTANT:** This method loads values directly from the storage attached\n   * to the client. If that storage is based on request cookies for example,\n   * the values in it may not be authentic and therefore it's strongly advised\n   * against using this method and its results in such circumstances. A warning\n   * will be emitted if this is detected. Use {@link #getUser()} instead.\n   */\n  async getSession() {\n    await this.initializePromise\n\n    const result = await this._acquireLock(-1, async () => {\n      return this._useSession(async (result) => {\n        return result\n      })\n    })\n\n    return result\n  }\n\n  /**\n   * Acquires a global lock based on the storage key.\n   */\n  private async _acquireLock<R>(acquireTimeout: number, fn: () => Promise<R>): Promise<R> {\n    this._debug('#_acquireLock', 'begin', acquireTimeout)\n\n    try {\n      if (this.lockAcquired) {\n        const last = this.pendingInLock.length\n          ? this.pendingInLock[this.pendingInLock.length - 1]\n          : Promise.resolve()\n\n        const result = (async () => {\n          await last\n          return await fn()\n        })()\n\n        this.pendingInLock.push(\n          (async () => {\n            try {\n              await result\n            } catch (e: any) {\n              // we just care if it finished\n            }\n          })()\n        )\n\n        return result\n      }\n\n      return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {\n        this._debug('#_acquireLock', 'lock acquired for storage key', this.storageKey)\n\n        try {\n          this.lockAcquired = true\n\n          const result = fn()\n\n          this.pendingInLock.push(\n            (async () => {\n              try {\n                await result\n              } catch (e: any) {\n                // we just care if it finished\n              }\n            })()\n          )\n\n          await result\n\n          // keep draining the queue until there's nothing to wait on\n          while (this.pendingInLock.length) {\n            const waitOn = [...this.pendingInLock]\n\n            await Promise.all(waitOn)\n\n            this.pendingInLock.splice(0, waitOn.length)\n          }\n\n          return await result\n        } finally {\n          this._debug('#_acquireLock', 'lock released for storage key', this.storageKey)\n\n          this.lockAcquired = false\n        }\n      })\n    } finally {\n      this._debug('#_acquireLock', 'end')\n    }\n  }\n\n  /**\n   * Use instead of {@link #getSession} inside the library. It is\n   * semantically usually what you want, as getting a session involves some\n   * processing afterwards that requires only one client operating on the\n   * session at once across multiple tabs or processes.\n   */\n  private async _useSession<R>(\n    fn: (\n      result:\n        | {\n            data: {\n              session: Session\n            }\n            error: null\n          }\n        | {\n            data: {\n              session: null\n            }\n            error: AuthError\n          }\n        | {\n            data: {\n              session: null\n            }\n            error: null\n          }\n    ) => Promise<R>\n  ): Promise<R> {\n    this._debug('#_useSession', 'begin')\n\n    try {\n      // the use of __loadSession here is the only correct use of the function!\n      const result = await this.__loadSession()\n\n      return await fn(result)\n    } finally {\n      this._debug('#_useSession', 'end')\n    }\n  }\n\n  /**\n   * NEVER USE DIRECTLY!\n   *\n   * Always use {@link #_useSession}.\n   */\n  private async __loadSession(): Promise<\n    | {\n        data: {\n          session: Session\n        }\n        error: null\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: AuthError\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: null\n      }\n  > {\n    this._debug('#__loadSession()', 'begin')\n\n    if (!this.lockAcquired) {\n      this._debug('#__loadSession()', 'used outside of an acquired lock!', new Error().stack)\n    }\n\n    try {\n      let currentSession: Session | null = null\n\n      const maybeSession = await getItemAsync(this.storage, this.storageKey)\n\n      this._debug('#getSession()', 'session from storage', maybeSession)\n\n      if (maybeSession !== null) {\n        if (this._isValidSession(maybeSession)) {\n          currentSession = maybeSession\n        } else {\n          this._debug('#getSession()', 'session from storage is not valid')\n          await this._removeSession()\n        }\n      }\n\n      if (!currentSession) {\n        return { data: { session: null }, error: null }\n      }\n\n      const hasExpired = currentSession.expires_at\n        ? currentSession.expires_at <= Date.now() / 1000\n        : false\n\n      this._debug(\n        '#__loadSession()',\n        `session has${hasExpired ? '' : ' not'} expired`,\n        'expires_at',\n        currentSession.expires_at\n      )\n\n      if (!hasExpired) {\n        if (this.storage.isServer) {\n          const proxySession: Session = new Proxy(currentSession, {\n            get(target: any, prop: string, receiver: any) {\n              if (prop === 'user') {\n                // only show warning when the user object is being accessed from the server\n                console.warn(\n                  'Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and many not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.'\n                )\n              }\n              return Reflect.get(target, prop, receiver)\n            },\n          })\n          currentSession = proxySession\n        }\n\n        return { data: { session: currentSession }, error: null }\n      }\n\n      const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n      if (error) {\n        return { data: { session: null }, error }\n      }\n\n      return { data: { session }, error: null }\n    } finally {\n      this._debug('#__loadSession()', 'end')\n    }\n  }\n\n  /**\n   * Gets the current user details if there is an existing session. This method\n   * performs a network request to the Supabase Auth server, so the returned\n   * value is authentic and can be used to base authorization rules on.\n   *\n   * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\n   */\n  async getUser(jwt?: string): Promise<UserResponse> {\n    if (jwt) {\n      return await this._getUser(jwt)\n    }\n\n    await this.initializePromise\n\n    const result = await this._acquireLock(-1, async () => {\n      return await this._getUser()\n    })\n\n    return result\n  }\n\n  private async _getUser(jwt?: string): Promise<UserResponse> {\n    try {\n      if (jwt) {\n        return await _request(this.fetch, 'GET', `${this.url}/user`, {\n          headers: this.headers,\n          jwt: jwt,\n          xform: _userResponse,\n        })\n      }\n\n      return await this._useSession(async (result) => {\n        const { data, error } = result\n        if (error) {\n          throw error\n        }\n\n        // returns an error if there is no access_token or custom authorization header\n        if (!data.session?.access_token && !this.hasCustomAuthorizationHeader) {\n          return { data: { user: null }, error: new AuthSessionMissingError() }\n        }\n\n        return await _request(this.fetch, 'GET', `${this.url}/user`, {\n          headers: this.headers,\n          jwt: data.session?.access_token ?? undefined,\n          xform: _userResponse,\n        })\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates user data for a logged in user.\n   */\n  async updateUser(\n    attributes: UserAttributes,\n    options: {\n      emailRedirectTo?: string | undefined\n    } = {}\n  ): Promise<UserResponse> {\n    await this.initializePromise\n\n    return await this._acquireLock(-1, async () => {\n      return await this._updateUser(attributes, options)\n    })\n  }\n\n  protected async _updateUser(\n    attributes: UserAttributes,\n    options: {\n      emailRedirectTo?: string | undefined\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      return await this._useSession(async (result) => {\n        const { data: sessionData, error: sessionError } = result\n        if (sessionError) {\n          throw sessionError\n        }\n        if (!sessionData.session) {\n          throw new AuthSessionMissingError()\n        }\n        const session: Session = sessionData.session\n        let codeChallenge: string | null = null\n        let codeChallengeMethod: string | null = null\n        if (this.flowType === 'pkce' && attributes.email != null) {\n          ;[codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(\n            this.storage,\n            this.storageKey\n          )\n        }\n\n        const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\n          headers: this.headers,\n          redirectTo: options?.emailRedirectTo,\n          body: {\n            ...attributes,\n            code_challenge: codeChallenge,\n            code_challenge_method: codeChallengeMethod,\n          },\n          jwt: session.access_token,\n          xform: _userResponse,\n        })\n        if (userError) throw userError\n        session.user = data.user as User\n        await this._saveSession(session)\n        await this._notifyAllSubscribers('USER_UPDATED', session)\n        return { data: { user: session.user }, error: null }\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  private _decodeJWT(jwt: string): {\n    exp?: number\n    aal?: AuthenticatorAssuranceLevels | null\n    amr?: AMREntry[] | null\n  } {\n    return decodeJWTPayload(jwt)\n  }\n\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  async setSession(currentSession: {\n    access_token: string\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    await this.initializePromise\n\n    return await this._acquireLock(-1, async () => {\n      return await this._setSession(currentSession)\n    })\n  }\n\n  protected async _setSession(currentSession: {\n    access_token: string\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    try {\n      if (!currentSession.access_token || !currentSession.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const timeNow = Date.now() / 1000\n      let expiresAt = timeNow\n      let hasExpired = true\n      let session: Session | null = null\n      const payload = decodeJWTPayload(currentSession.access_token)\n      if (payload.exp) {\n        expiresAt = payload.exp\n        hasExpired = expiresAt <= timeNow\n      }\n\n      if (hasExpired) {\n        const { session: refreshedSession, error } = await this._callRefreshToken(\n          currentSession.refresh_token\n        )\n        if (error) {\n          return { data: { user: null, session: null }, error: error }\n        }\n\n        if (!refreshedSession) {\n          return { data: { user: null, session: null }, error: null }\n        }\n        session = refreshedSession\n      } else {\n        const { data, error } = await this._getUser(currentSession.access_token)\n        if (error) {\n          throw error\n        }\n        session = {\n          access_token: currentSession.access_token,\n          refresh_token: currentSession.refresh_token,\n          user: data.user,\n          token_type: 'bearer',\n          expires_in: expiresAt - timeNow,\n          expires_at: expiresAt,\n        }\n        await this._saveSession(session)\n        await this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  async refreshSession(currentSession?: { refresh_token: string }): Promise<AuthResponse> {\n    await this.initializePromise\n\n    return await this._acquireLock(-1, async () => {\n      return await this._refreshSession(currentSession)\n    })\n  }\n\n  protected async _refreshSession(currentSession?: {\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    try {\n      return await this._useSession(async (result) => {\n        if (!currentSession) {\n          const { data, error } = result\n          if (error) {\n            throw error\n          }\n\n          currentSession = data.session ?? undefined\n        }\n\n        if (!currentSession?.refresh_token) {\n          throw new AuthSessionMissingError()\n        }\n\n        const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n        if (error) {\n          return { data: { user: null, session: null }, error: error }\n        }\n\n        if (!session) {\n          return { data: { user: null, session: null }, error: null }\n        }\n\n        return { data: { user: session.user, session }, error: null }\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets the session data from a URL string\n   */\n  private async _getSessionFromURL(isPKCEFlow: boolean): Promise<\n    | {\n        data: { session: Session; redirectType: string | null }\n        error: null\n      }\n    | { data: { session: null; redirectType: null }; error: AuthError }\n  > {\n    try {\n      if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.')\n      if (this.flowType === 'implicit' && !this._isImplicitGrantFlow()) {\n        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.')\n      } else if (this.flowType == 'pkce' && !isPKCEFlow) {\n        throw new AuthPKCEGrantCodeExchangeError('Not a valid PKCE flow url.')\n      }\n\n      const params = parseParametersFromURL(window.location.href)\n\n      if (isPKCEFlow) {\n        if (!params.code) throw new AuthPKCEGrantCodeExchangeError('No code detected.')\n        const { data, error } = await this._exchangeCodeForSession(params.code)\n        if (error) throw error\n\n        const url = new URL(window.location.href)\n        url.searchParams.delete('code')\n\n        window.history.replaceState(window.history.state, '', url.toString())\n\n        return { data: { session: data.session, redirectType: null }, error: null }\n      }\n\n      if (params.error || params.error_description || params.error_code) {\n        throw new AuthImplicitGrantRedirectError(\n          params.error_description || 'Error in URL with unspecified error_description',\n          {\n            error: params.error || 'unspecified_error',\n            code: params.error_code || 'unspecified_code',\n          }\n        )\n      }\n\n      const {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        refresh_token,\n        expires_in,\n        expires_at,\n        token_type,\n      } = params\n\n      if (!access_token || !expires_in || !refresh_token || !token_type) {\n        throw new AuthImplicitGrantRedirectError('No session defined in URL')\n      }\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expiresIn = parseInt(expires_in)\n      let expiresAt = timeNow + expiresIn\n\n      if (expires_at) {\n        expiresAt = parseInt(expires_at)\n      }\n\n      const actuallyExpiresIn = expiresAt - timeNow\n      if (actuallyExpiresIn * 1000 <= AUTO_REFRESH_TICK_DURATION) {\n        console.warn(\n          `@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`\n        )\n      }\n\n      const issuedAt = expiresAt - expiresIn\n      if (timeNow - issuedAt >= 120) {\n        console.warn(\n          '@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale',\n          issuedAt,\n          expiresAt,\n          timeNow\n        )\n      } else if (timeNow - issuedAt < 0) {\n        console.warn(\n          '@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clok for skew',\n          issuedAt,\n          expiresAt,\n          timeNow\n        )\n      }\n\n      const { data, error } = await this._getUser(access_token)\n      if (error) throw error\n\n      const session: Session = {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        expires_in: expiresIn,\n        expires_at: expiresAt,\n        refresh_token,\n        token_type,\n        user: data.user,\n      }\n\n      // Remove tokens from URL\n      window.location.hash = ''\n      this._debug('#_getSessionFromURL()', 'clearing window.location.hash')\n\n      return { data: { session, redirectType: params.type }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, redirectType: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  private _isImplicitGrantFlow(): boolean {\n    const params = parseParametersFromURL(window.location.href)\n\n    return !!(isBrowser() && (params.access_token || params.error_description))\n  }\n\n  /**\n   * Checks if the current URL and backing storage contain parameters given by a PKCE flow\n   */\n  private async _isPKCEFlow(): Promise<boolean> {\n    const params = parseParametersFromURL(window.location.href)\n\n    const currentStorageContent = await getItemAsync(\n      this.storage,\n      `${this.storageKey}-code-verifier`\n    )\n\n    return !!(params.code && currentStorageContent)\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   *\n   * If using `others` scope, no `SIGNED_OUT` event is fired!\n   */\n  async signOut(options: SignOut = { scope: 'global' }): Promise<{ error: AuthError | null }> {\n    await this.initializePromise\n\n    return await this._acquireLock(-1, async () => {\n      return await this._signOut(options)\n    })\n  }\n\n  protected async _signOut(\n    { scope }: SignOut = { scope: 'global' }\n  ): Promise<{ error: AuthError | null }> {\n    return await this._useSession(async (result) => {\n      const { data, error: sessionError } = result\n      if (sessionError) {\n        return { error: sessionError }\n      }\n      const accessToken = data.session?.access_token\n      if (accessToken) {\n        const { error } = await this.admin.signOut(accessToken, scope)\n        if (error) {\n          // ignore 404s since user might not exist anymore\n          // ignore 401s since an invalid or expired JWT should sign out the current session\n          if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n            return { error }\n          }\n        }\n      }\n      if (scope !== 'others') {\n        await this._removeSession()\n        await removeItemAsync(this.storage, `${this.storageKey}-code-verifier`)\n        await this._notifyAllSubscribers('SIGNED_OUT', null)\n      }\n      return { error: null }\n    })\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(\n    callback: (event: AuthChangeEvent, session: Session | null) => void | Promise<void>\n  ): {\n    data: { subscription: Subscription }\n  } {\n    const id: string = uuid()\n    const subscription: Subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this._debug('#unsubscribe()', 'state change callback with id removed', id)\n\n        this.stateChangeEmitters.delete(id)\n      },\n    }\n\n    this._debug('#onAuthStateChange()', 'registered callback with id', id)\n\n    this.stateChangeEmitters.set(id, subscription)\n    ;(async () => {\n      await this.initializePromise\n\n      await this._acquireLock(-1, async () => {\n        this._emitInitialSession(id)\n      })\n    })()\n\n    return { data: { subscription } }\n  }\n\n  private async _emitInitialSession(id: string): Promise<void> {\n    return await this._useSession(async (result) => {\n      try {\n        const {\n          data: { session },\n          error,\n        } = result\n        if (error) throw error\n\n        await this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', session)\n        this._debug('INITIAL_SESSION', 'callback id', id, 'session', session)\n      } catch (err) {\n        await this.stateChangeEmitters.get(id)?.callback('INITIAL_SESSION', null)\n        this._debug('INITIAL_SESSION', 'callback id', id, 'error', err)\n        console.error(err)\n      }\n    })\n  }\n\n  /**\n   * Sends a password reset request to an email address. This method supports the PKCE flow.\n   *\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<\n    | {\n        data: {}\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    let codeChallenge: string | null = null\n    let codeChallengeMethod: string | null = null\n\n    if (this.flowType === 'pkce') {\n      ;[codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(\n        this.storage,\n        this.storageKey,\n        true // isPasswordRecovery\n      )\n    }\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/recover`, {\n        body: {\n          email,\n          code_challenge: codeChallenge,\n          code_challenge_method: codeChallengeMethod,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets all the identities linked to a user.\n   */\n  async getUserIdentities(): Promise<\n    | {\n        data: {\n          identities: UserIdentity[]\n        }\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    try {\n      const { data, error } = await this.getUser()\n      if (error) throw error\n      return { data: { identities: data.user.identities ?? [] }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n  /**\n   * Links an oauth identity to an existing user.\n   * This method supports the PKCE flow.\n   */\n  async linkIdentity(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\n    try {\n      const { data, error } = await this._useSession(async (result) => {\n        const { data, error } = result\n        if (error) throw error\n        const url: string = await this._getUrlForProvider(\n          `${this.url}/user/identities/authorize`,\n          credentials.provider,\n          {\n            redirectTo: credentials.options?.redirectTo,\n            scopes: credentials.options?.scopes,\n            queryParams: credentials.options?.queryParams,\n            skipBrowserRedirect: true,\n          }\n        )\n        return await _request(this.fetch, 'GET', url, {\n          headers: this.headers,\n          jwt: data.session?.access_token ?? undefined,\n        })\n      })\n      if (error) throw error\n      if (isBrowser() && !credentials.options?.skipBrowserRedirect) {\n        window.location.assign(data?.url)\n      }\n      return { data: { provider: credentials.provider, url: data?.url }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { provider: credentials.provider, url: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\n   */\n  async unlinkIdentity(identity: UserIdentity): Promise<\n    | {\n        data: {}\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    try {\n      return await this._useSession(async (result) => {\n        const { data, error } = result\n        if (error) {\n          throw error\n        }\n        return await _request(\n          this.fetch,\n          'DELETE',\n          `${this.url}/user/identities/${identity.identity_id}`,\n          {\n            headers: this.headers,\n            jwt: data.session?.access_token ?? undefined,\n          }\n        )\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  private async _refreshAccessToken(refreshToken: string): Promise<AuthResponse> {\n    const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`\n    this._debug(debugName, 'begin')\n\n    try {\n      const startedAt = Date.now()\n\n      // will attempt to refresh the token with exponential backoff\n      return await retryable(\n        async (attempt) => {\n          if (attempt > 0) {\n            await sleep(200 * Math.pow(2, attempt - 1)) // 200, 400, 800, ...\n          }\n\n          this._debug(debugName, 'refreshing attempt', attempt)\n\n          return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: { refresh_token: refreshToken },\n            headers: this.headers,\n            xform: _sessionResponse,\n          })\n        },\n        (attempt, error) => {\n          const nextBackOffInterval = 200 * Math.pow(2, attempt)\n          return (\n            error &&\n            isAuthRetryableFetchError(error) &&\n            // retryable only if the request can be sent before the backoff overflows the tick duration\n            Date.now() + nextBackOffInterval - startedAt < AUTO_REFRESH_TICK_DURATION\n          )\n        }\n      )\n    } catch (error) {\n      this._debug(debugName, 'error', error)\n\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n      throw error\n    } finally {\n      this._debug(debugName, 'end')\n    }\n  }\n\n  private _isValidSession(maybeSession: unknown): maybeSession is Session {\n    const isValidSession =\n      typeof maybeSession === 'object' &&\n      maybeSession !== null &&\n      'access_token' in maybeSession &&\n      'refresh_token' in maybeSession &&\n      'expires_at' in maybeSession\n\n    return isValidSession\n  }\n\n  private async _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n      skipBrowserRedirect?: boolean\n    }\n  ) {\n    const url: string = await this._getUrlForProvider(`${this.url}/authorize`, provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n\n    this._debug('#_handleProviderSignIn()', 'provider', provider, 'options', options, 'url', url)\n\n    // try to open on the browser\n    if (isBrowser() && !options.skipBrowserRedirect) {\n      window.location.assign(url)\n    }\n\n    return { data: { provider, url }, error: null }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    const debugName = '#_recoverAndRefresh()'\n    this._debug(debugName, 'begin')\n\n    try {\n      const currentSession = await getItemAsync(this.storage, this.storageKey)\n      this._debug(debugName, 'session from storage', currentSession)\n\n      if (!this._isValidSession(currentSession)) {\n        this._debug(debugName, 'session is not valid')\n        if (currentSession !== null) {\n          await this._removeSession()\n        }\n\n        return\n      }\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expiresWithMargin = (currentSession.expires_at ?? Infinity) < timeNow + EXPIRY_MARGIN\n\n      this._debug(\n        debugName,\n        `session has${expiresWithMargin ? '' : ' not'} expired with margin of ${EXPIRY_MARGIN}s`\n      )\n\n      if (expiresWithMargin) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n\n          if (error) {\n            console.error(error)\n\n            if (!isAuthRetryableFetchError(error)) {\n              this._debug(\n                debugName,\n                'refresh failed with a non-retryable error, removing the session',\n                error\n              )\n              await this._removeSession()\n            }\n          }\n        }\n      } else {\n        // no need to persist currentSession again, as we just loaded it from\n        // local storage; persisting it again may overwrite a value saved by\n        // another client with access to the same local storage\n        await this._notifyAllSubscribers('SIGNED_IN', currentSession)\n      }\n    } catch (err) {\n      this._debug(debugName, 'error', err)\n\n      console.error(err)\n      return\n    } finally {\n      this._debug(debugName, 'end')\n    }\n  }\n\n  private async _callRefreshToken(refreshToken: string): Promise<CallRefreshTokenResult> {\n    if (!refreshToken) {\n      throw new AuthSessionMissingError()\n    }\n\n    // refreshing is already in progress\n    if (this.refreshingDeferred) {\n      return this.refreshingDeferred.promise\n    }\n\n    const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`\n\n    this._debug(debugName, 'begin')\n\n    try {\n      this.refreshingDeferred = new Deferred<CallRefreshTokenResult>()\n\n      const { data, error } = await this._refreshAccessToken(refreshToken)\n      if (error) throw error\n      if (!data.session) throw new AuthSessionMissingError()\n\n      await this._saveSession(data.session)\n      await this._notifyAllSubscribers('TOKEN_REFRESHED', data.session)\n\n      const result = { session: data.session, error: null }\n\n      this.refreshingDeferred.resolve(result)\n\n      return result\n    } catch (error) {\n      this._debug(debugName, 'error', error)\n\n      if (isAuthError(error)) {\n        const result = { session: null, error }\n\n        if (!isAuthRetryableFetchError(error)) {\n          await this._removeSession()\n          await this._notifyAllSubscribers('SIGNED_OUT', null)\n        }\n\n        this.refreshingDeferred?.resolve(result)\n\n        return result\n      }\n\n      this.refreshingDeferred?.reject(error)\n      throw error\n    } finally {\n      this.refreshingDeferred = null\n      this._debug(debugName, 'end')\n    }\n  }\n\n  private async _notifyAllSubscribers(\n    event: AuthChangeEvent,\n    session: Session | null,\n    broadcast = true\n  ) {\n    const debugName = `#_notifyAllSubscribers(${event})`\n    this._debug(debugName, 'begin', session, `broadcast = ${broadcast}`)\n\n    try {\n      if (this.broadcastChannel && broadcast) {\n        this.broadcastChannel.postMessage({ event, session })\n      }\n\n      const errors: any[] = []\n      const promises = Array.from(this.stateChangeEmitters.values()).map(async (x) => {\n        try {\n          await x.callback(event, session)\n        } catch (e: any) {\n          errors.push(e)\n        }\n      })\n\n      await Promise.all(promises)\n\n      if (errors.length > 0) {\n        for (let i = 0; i < errors.length; i += 1) {\n          console.error(errors[i])\n        }\n\n        throw errors[0]\n      }\n    } finally {\n      this._debug(debugName, 'end')\n    }\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private async _saveSession(session: Session) {\n    this._debug('#_saveSession()', session)\n\n    await setItemAsync(this.storage, this.storageKey, session)\n  }\n\n  private async _removeSession() {\n    this._debug('#_removeSession()')\n\n    await removeItemAsync(this.storage, this.storageKey)\n  }\n\n  /**\n   * Removes any registered visibilitychange callback.\n   *\n   * {@see #startAutoRefresh}\n   * {@see #stopAutoRefresh}\n   */\n  private _removeVisibilityChangedCallback() {\n    this._debug('#_removeVisibilityChangedCallback()')\n\n    const callback = this.visibilityChangedCallback\n    this.visibilityChangedCallback = null\n\n    try {\n      if (callback && isBrowser() && window?.removeEventListener) {\n        window.removeEventListener('visibilitychange', callback)\n      }\n    } catch (e) {\n      console.error('removing visibilitychange callback failed', e)\n    }\n  }\n\n  /**\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _startAutoRefresh() {\n    await this._stopAutoRefresh()\n\n    this._debug('#_startAutoRefresh()')\n\n    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION)\n    this.autoRefreshTicker = ticker\n\n    if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n      // ticker is a NodeJS Timeout object that has an `unref` method\n      // https://nodejs.org/api/timers.html#timeoutunref\n      // When auto refresh is used in NodeJS (like for testing) the\n      // `setInterval` is preventing the process from being marked as\n      // finished and tests run endlessly. This can be prevented by calling\n      // `unref()` on the returned object.\n      ticker.unref()\n      // @ts-ignore\n    } else if (typeof Deno !== 'undefined' && typeof Deno.unrefTimer === 'function') {\n      // similar like for NodeJS, but with the Deno API\n      // https://deno.land/api@latest?unstable&s=Deno.unrefTimer\n      // @ts-ignore\n      Deno.unrefTimer(ticker)\n    }\n\n    // run the tick immediately, but in the next pass of the event loop so that\n    // #_initialize can be allowed to complete without recursively waiting on\n    // itself\n    setTimeout(async () => {\n      await this.initializePromise\n      await this._autoRefreshTokenTick()\n    }, 0)\n  }\n\n  /**\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _stopAutoRefresh() {\n    this._debug('#_stopAutoRefresh()')\n\n    const ticker = this.autoRefreshTicker\n    this.autoRefreshTicker = null\n\n    if (ticker) {\n      clearInterval(ticker)\n    }\n  }\n\n  /**\n   * Starts an auto-refresh process in the background. The session is checked\n   * every few seconds. Close to the time of expiration a process is started to\n   * refresh the session. If refreshing fails it will be retried for as long as\n   * necessary.\n   *\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n   * to call this function, it will be called for you.\n   *\n   * On browsers the refresh process works only when the tab/window is in the\n   * foreground to conserve resources as well as prevent race conditions and\n   * flooding auth with requests. If you call this method any managed\n   * visibility change callback will be removed and you must manage visibility\n   * changes on your own.\n   *\n   * On non-browser platforms the refresh process works *continuously* in the\n   * background, which may not be desirable. You should hook into your\n   * platform's foreground indication mechanism and call these methods\n   * appropriately to conserve resources.\n   *\n   * {@see #stopAutoRefresh}\n   */\n  async startAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._startAutoRefresh()\n  }\n\n  /**\n   * Stops an active auto refresh process running in the background (if any).\n   *\n   * If you call this method any managed visibility change callback will be\n   * removed and you must manage visibility changes on your own.\n   *\n   * See {@link #startAutoRefresh} for more details.\n   */\n  async stopAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._stopAutoRefresh()\n  }\n\n  /**\n   * Runs the auto refresh token tick.\n   */\n  private async _autoRefreshTokenTick() {\n    this._debug('#_autoRefreshTokenTick()', 'begin')\n\n    try {\n      await this._acquireLock(0, async () => {\n        try {\n          const now = Date.now()\n\n          try {\n            return await this._useSession(async (result) => {\n              const {\n                data: { session },\n              } = result\n\n              if (!session || !session.refresh_token || !session.expires_at) {\n                this._debug('#_autoRefreshTokenTick()', 'no session')\n                return\n              }\n\n              // session will expire in this many ticks (or has already expired if <= 0)\n              const expiresInTicks = Math.floor(\n                (session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION\n              )\n\n              this._debug(\n                '#_autoRefreshTokenTick()',\n                `access token expires in ${expiresInTicks} ticks, a tick lasts ${AUTO_REFRESH_TICK_DURATION}ms, refresh threshold is ${AUTO_REFRESH_TICK_THRESHOLD} ticks`\n              )\n\n              if (expiresInTicks <= AUTO_REFRESH_TICK_THRESHOLD) {\n                await this._callRefreshToken(session.refresh_token)\n              }\n            })\n          } catch (e: any) {\n            console.error(\n              'Auto refresh tick failed with error. This is likely a transient error.',\n              e\n            )\n          }\n        } finally {\n          this._debug('#_autoRefreshTokenTick()', 'end')\n        }\n      })\n    } catch (e: any) {\n      if (e.isAcquireTimeout || e instanceof LockAcquireTimeoutError) {\n        this._debug('auto refresh token tick lock not available')\n      } else {\n        throw e\n      }\n    }\n  }\n\n  /**\n   * Registers callbacks on the browser / platform, which in-turn run\n   * algorithms when the browser window/tab are in foreground. On non-browser\n   * platforms it assumes always foreground.\n   */\n  private async _handleVisibilityChange() {\n    this._debug('#_handleVisibilityChange()')\n\n    if (!isBrowser() || !window?.addEventListener) {\n      if (this.autoRefreshToken) {\n        // in non-browser environments the refresh token ticker runs always\n        this.startAutoRefresh()\n      }\n\n      return false\n    }\n\n    try {\n      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false)\n\n      window?.addEventListener('visibilitychange', this.visibilityChangedCallback)\n\n      // now immediately call the visbility changed callback to setup with the\n      // current visbility state\n      await this._onVisibilityChanged(true) // initial call\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n\n  /**\n   * Callback registered with `window.addEventListener('visibilitychange')`.\n   */\n  private async _onVisibilityChanged(calledFromInitialize: boolean) {\n    const methodName = `#_onVisibilityChanged(${calledFromInitialize})`\n    this._debug(methodName, 'visibilityState', document.visibilityState)\n\n    if (document.visibilityState === 'visible') {\n      if (this.autoRefreshToken) {\n        // in browser environments the refresh token ticker runs only on focused tabs\n        // which prevents race conditions\n        this._startAutoRefresh()\n      }\n\n      if (!calledFromInitialize) {\n        // called when the visibility has changed, i.e. the browser\n        // transitioned from hidden -> visible so we need to see if the session\n        // should be recovered immediately... but to do that we need to acquire\n        // the lock first asynchronously\n        await this.initializePromise\n\n        await this._acquireLock(-1, async () => {\n          if (document.visibilityState !== 'visible') {\n            this._debug(\n              methodName,\n              'acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting'\n            )\n\n            // visibility has changed while waiting for the lock, abort\n            return\n          }\n\n          // recover the session\n          await this._recoverAndRefresh()\n        })\n      }\n    } else if (document.visibilityState === 'hidden') {\n      if (this.autoRefreshToken) {\n        this._stopAutoRefresh()\n      }\n    }\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  private async _getUrlForProvider(\n    url: string,\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n      skipBrowserRedirect?: boolean\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (this.flowType === 'pkce') {\n      const [codeChallenge, codeChallengeMethod] = await getCodeChallengeAndMethod(\n        this.storage,\n        this.storageKey\n      )\n\n      const flowParams = new URLSearchParams({\n        code_challenge: `${encodeURIComponent(codeChallenge)}`,\n        code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`,\n      })\n      urlParams.push(flowParams.toString())\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(query.toString())\n    }\n    if (options?.skipBrowserRedirect) {\n      urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`)\n    }\n\n    return `${url}?${urlParams.join('&')}`\n  }\n\n  private async _unenroll(params: MFAUnenrollParams): Promise<AuthMFAUnenrollResponse> {\n    try {\n      return await this._useSession(async (result) => {\n        const { data: sessionData, error: sessionError } = result\n        if (sessionError) {\n          return { data: null, error: sessionError }\n        }\n\n        return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        })\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#enroll}\n   */\n  private async _enroll(params: MFAEnrollParams): Promise<AuthMFAEnrollResponse> {\n    try {\n      return await this._useSession(async (result) => {\n        const { data: sessionData, error: sessionError } = result\n        if (sessionError) {\n          return { data: null, error: sessionError }\n        }\n\n        const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\n          body: {\n            friendly_name: params.friendlyName,\n            factor_type: params.factorType,\n            issuer: params.issuer,\n          },\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        })\n\n        if (error) {\n          return { data: null, error }\n        }\n\n        if (data?.totp?.qr_code) {\n          data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`\n        }\n\n        return { data, error: null }\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#verify}\n   */\n  private async _verify(params: MFAVerifyParams): Promise<AuthMFAVerifyResponse> {\n    return this._acquireLock(-1, async () => {\n      try {\n        return await this._useSession(async (result) => {\n          const { data: sessionData, error: sessionError } = result\n          if (sessionError) {\n            return { data: null, error: sessionError }\n          }\n\n          const { data, error } = await _request(\n            this.fetch,\n            'POST',\n            `${this.url}/factors/${params.factorId}/verify`,\n            {\n              body: { code: params.code, challenge_id: params.challengeId },\n              headers: this.headers,\n              jwt: sessionData?.session?.access_token,\n            }\n          )\n          if (error) {\n            return { data: null, error }\n          }\n\n          await this._saveSession({\n            expires_at: Math.round(Date.now() / 1000) + data.expires_in,\n            ...data,\n          })\n          await this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data)\n\n          return { data, error }\n        })\n      } catch (error) {\n        if (isAuthError(error)) {\n          return { data: null, error }\n        }\n        throw error\n      }\n    })\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challenge}\n   */\n  private async _challenge(params: MFAChallengeParams): Promise<AuthMFAChallengeResponse> {\n    return this._acquireLock(-1, async () => {\n      try {\n        return await this._useSession(async (result) => {\n          const { data: sessionData, error: sessionError } = result\n          if (sessionError) {\n            return { data: null, error: sessionError }\n          }\n\n          return await _request(\n            this.fetch,\n            'POST',\n            `${this.url}/factors/${params.factorId}/challenge`,\n            {\n              headers: this.headers,\n              jwt: sessionData?.session?.access_token,\n            }\n          )\n        })\n      } catch (error) {\n        if (isAuthError(error)) {\n          return { data: null, error }\n        }\n        throw error\n      }\n    })\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challengeAndVerify}\n   */\n  private async _challengeAndVerify(\n    params: MFAChallengeAndVerifyParams\n  ): Promise<AuthMFAVerifyResponse> {\n    // both _challenge and _verify independently acquire the lock, so no need\n    // to acquire it here\n\n    const { data: challengeData, error: challengeError } = await this._challenge({\n      factorId: params.factorId,\n    })\n    if (challengeError) {\n      return { data: null, error: challengeError }\n    }\n\n    return await this._verify({\n      factorId: params.factorId,\n      challengeId: challengeData.id,\n      code: params.code,\n    })\n  }\n\n  /**\n   * {@see GoTrueMFAApi#listFactors}\n   */\n  private async _listFactors(): Promise<AuthMFAListFactorsResponse> {\n    // use #getUser instead of #_getUser as the former acquires a lock\n    const {\n      data: { user },\n      error: userError,\n    } = await this.getUser()\n    if (userError) {\n      return { data: null, error: userError }\n    }\n\n    const factors = user?.factors || []\n    const totp = factors.filter(\n      (factor) => factor.factor_type === 'totp' && factor.status === 'verified'\n    )\n\n    return {\n      data: {\n        all: factors,\n        totp,\n      },\n      error: null,\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n   */\n  private async _getAuthenticatorAssuranceLevel(): Promise<AuthMFAGetAuthenticatorAssuranceLevelResponse> {\n    return this._acquireLock(-1, async () => {\n      return await this._useSession(async (result) => {\n        const {\n          data: { session },\n          error: sessionError,\n        } = result\n        if (sessionError) {\n          return { data: null, error: sessionError }\n        }\n        if (!session) {\n          return {\n            data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n            error: null,\n          }\n        }\n\n        const payload = this._decodeJWT(session.access_token)\n\n        let currentLevel: AuthenticatorAssuranceLevels | null = null\n\n        if (payload.aal) {\n          currentLevel = payload.aal\n        }\n\n        let nextLevel: AuthenticatorAssuranceLevels | null = currentLevel\n\n        const verifiedFactors =\n          session.user.factors?.filter((factor: Factor) => factor.status === 'verified') ?? []\n\n        if (verifiedFactors.length > 0) {\n          nextLevel = 'aal2'\n        }\n\n        const currentAuthenticationMethods = payload.amr || []\n\n        return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null }\n      })\n    })\n  }\n}\n", "import GoTrueAdminApi from './GoTrueAdminApi'\n\nconst AuthAdminApi = GoTrueAdminApi\n\nexport default AuthAdminApi\n", "import GoTrueClient from './GoTrueClient'\n\nconst AuthClient = GoTrueClient\n\nexport default AuthClient\n", "import { AuthClient } from '@supabase/auth-js'\nimport { SupabaseAuthClientOptions } from './types'\n\nexport class SupabaseAuthClient extends AuthClient {\n  constructor(options: SupabaseAuthClientOptions) {\n    super(options)\n  }\n}\n", "import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/auth-js'\nimport {\n  PostgrestClient,\n  PostgrestFilterBuilder,\n  PostgrestQueryBuilder,\n} from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport {\n  DEFAULT_GLOBAL_OPTIONS,\n  DEFAULT_DB_OPTIONS,\n  DEFAULT_AUTH_OPTIONS,\n  DEFAULT_REALTIME_OPTIONS,\n} from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected rest: PostgrestClient<Database, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken?: string\n\n  protected headers: Record<string, string>\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`\n\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth?.storageKey ?? ''\n    this.headers = settings.global?.headers ?? {}\n\n    this.auth = this._initSupabaseAuthClient(\n      settings.auth ?? {},\n      this.headers,\n      settings.global?.fetch\n    )\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\n\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: settings.db?.schema,\n      fetch: this.fetch,\n    })\n\n    this._listenForAuthEvents()\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.from\n  from<\n    TableName extends string & keyof Schema['Tables'],\n    Table extends Schema['Tables'][TableName]\n  >(relation: TableName): PostgrestQueryBuilder<Schema, Table, TableName>\n  from<ViewName extends string & keyof Schema['Views'], View extends Schema['Views'][ViewName]>(\n    relation: ViewName\n  ): PostgrestQueryBuilder<Schema, View, ViewName>\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from(relation: string): PostgrestQueryBuilder<Schema, any, any> {\n    return this.rest.from(relation)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.schema\n  /**\n   * Select a schema to query or perform an function (rpc) call.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The schema to query\n   */\n  schema<DynamicSchema extends string & keyof Database>(\n    schema: DynamicSchema\n  ): PostgrestClient<\n    Database,\n    DynamicSchema,\n    Database[DynamicSchema] extends GenericSchema ? Database[DynamicSchema] : any\n  > {\n    return this.rest.schema<DynamicSchema>(schema)\n  }\n\n  // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.get - When set to `true`, the function will be called with\n   * read-only access mode.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc<FnName extends string & keyof Schema['Functions'], Fn extends Schema['Functions'][FnName]>(\n    fn: FnName,\n    args: Fn['Args'] = {},\n    options: {\n      head?: boolean\n      get?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<\n    Schema,\n    Fn['Returns'] extends any[]\n      ? Fn['Returns'][number] extends Record<string, unknown>\n        ? Fn['Returns'][number]\n        : never\n      : never,\n    Fn['Returns']\n  > {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? null\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n      debug,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch,\n      // auth checks if there is a custom authorizaiton header using this flag\n      // so it knows whether to return an error when getUser is called with no session\n      hasCustomAuthorizationHeader: 'Authorization' in this.headers ?? false,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session?.access_token)\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    source: 'CLIENT' | 'STORAGE',\n    token?: string\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token ?? null)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n", "import SupabaseClient from './SupabaseClient'\nimport type { GenericSchema, SupabaseClientOptions } from './lib/types'\n\nexport * from '@supabase/auth-js'\nexport type { User as AuthUser, Session as AuthSession } from '@supabase/auth-js'\nexport type {\n  PostgrestResponse,\n  PostgrestSingleResponse,\n  PostgrestMaybeSingleResponse,\n  PostgrestError,\n} from '@supabase/postgrest-js'\nexport {\n  FunctionsHttpError,\n  FunctionsFetchError,\n  FunctionsRelayError,\n  FunctionsError,\n  FunctionInvokeOptions,\n  FunctionRegion,\n} from '@supabase/functions-js'\nexport * from '@supabase/realtime-js'\nexport { default as SupabaseClient } from './SupabaseClient'\nexport type { SupabaseClientOptions, QueryResult, QueryData, QueryError } from './lib/types'\n\n/**\n * Creates a new Supabase Client.\n */\nexport const createClient = <\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n>(\n  supabaseUrl: string,\n  supabaseKey: string,\n  options?: SupabaseClientOptions<SchemaName>\n): SupabaseClient<Database, SchemaName, Schema> => {\n  return new SupabaseClient<Database, SchemaName, Schema>(supabaseUrl, supabaseKey, options)\n}\n"],
  "mappings": "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",
  "names": ["Headers", "fetch", "DEFAULT_DB_OPTIONS", "DEFAULT_AUTH_OPTIONS", "DEFAULT_REALTIME_OPTIONS", "DEFAULT_GLOBAL_OPTIONS", "version", "DEFAULT_HEADERS", "version", "resolveFetch", "fetch", "fetch", "resolveFetch", "__rest", "DEFAULT_HEADERS", "resolveFetch", "version", "result", "expiresAt", "error", "data", "_a", "fetch"]
}
